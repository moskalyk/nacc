import { ChainIdLike, NetworkConfig } from '@0xsequence/network';
import { MuxTransportTemplate } from "./transports/index.js";
import { ItemStore } from "./utils.js";
import { SequenceProvider } from "./provider.js";
export interface ProviderConfig {
    localStorage?: ItemStore;
    defaultNetwork?: ChainIdLike;
    defaultEIP6492?: boolean;
    networks?: Partial<NetworkConfig>[];
    transports?: MuxTransportTemplate;
    analytics?: boolean;
}
export declare const DefaultProviderConfig: {
    transports: {
        walletAppURL: string;
        windowTransport: {
            enabled: boolean;
        };
        proxyTransport: {
            enabled: boolean;
        };
    };
    defaultNetwork: number;
    analytics: boolean;
};
/**
 * Initializes a wallet with the provided project access key and optional configuration.
 *
 * @param projectAccessKey - Access key for the project that can be obtained from Sequence Builder on sequence.build
 * @param partialConfig - Optional partial configuration for the wallet.
 * @returns The initialized wallet provider.
 * @throws Error if projectAccessKey is not provided, empty string or is not string.
 */
export declare const initWallet: (projectAccessKey: string, partialConfig?: Partial<ProviderConfig>) => SequenceProvider;
export declare const unregisterWallet: () => void;
export declare const getWallet: () => SequenceProvider;
