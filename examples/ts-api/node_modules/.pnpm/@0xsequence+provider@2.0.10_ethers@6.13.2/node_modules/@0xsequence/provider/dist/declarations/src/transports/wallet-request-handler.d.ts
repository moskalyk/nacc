import { Account } from '@0xsequence/account';
import { commons } from '@0xsequence/core';
import { ChainIdLike, NetworkConfig, EIP1193Provider } from '@0xsequence/network';
import { ConnectDetails, ConnectOptions, MessageToSign, NetworkedConnectOptions, OpenWalletIntent, PromptConnectDetails, ProviderEventTypes, ProviderMessageRequest, ProviderMessageRequestHandler, ProviderMessageResponse, ProviderRpcError, WalletSession } from "../types.js";
export interface WalletSignInOptions {
    connect?: boolean;
    defaultNetworkId?: number;
}
export declare class WalletRequestHandler implements EIP1193Provider, ProviderMessageRequestHandler {
    private account;
    private signerReadyCallbacks;
    private prompter;
    private networks;
    private _openIntent?;
    private _connectOptions?;
    private events;
    onConnectOptionsChange: ((connectOptions: ConnectOptions | undefined) => void) | undefined;
    constructor(account: Account | null | undefined, prompter: WalletUserPrompter | null, networks: NetworkConfig[]);
    defaultChainId(): number;
    signIn(account: Account | null, options?: WalletSignInOptions): Promise<void>;
    signOut(): void;
    signerReset(): void;
    signerReady(timeout?: number): Promise<void>;
    connect(options?: NetworkedConnectOptions): Promise<ConnectDetails>;
    promptConnect: (options?: NetworkedConnectOptions) => Promise<ConnectDetails>;
    sendMessageRequest(message: ProviderMessageRequest): Promise<ProviderMessageResponse>;
    request(request: {
        method: string;
        params?: any[];
        chainId?: number;
    }): Promise<any>;
    on<K extends keyof ProviderEventTypes>(event: K, fn: ProviderEventTypes[K]): void;
    once<K extends keyof ProviderEventTypes>(event: K, fn: ProviderEventTypes[K]): void;
    getAddress(): Promise<string>;
    get openIntent(): OpenWalletIntent | undefined;
    setOpenIntent(intent: OpenWalletIntent | undefined): void;
    get connectOptions(): ConnectOptions | undefined;
    setConnectOptions(options: ConnectOptions | undefined): void;
    setDefaultChainId(chainId: number): Promise<number>;
    getNetworks(jsonRpcResponse?: boolean): Promise<NetworkConfig[]>;
    walletSession(networkId?: ChainIdLike): WalletSession | undefined;
    notifyConnect(connectDetails: ConnectDetails, origin?: string): void;
    notifyDisconnect(origin?: string): void;
    notifyChainChanged(chainId: number, origin?: string): void;
    notifyNetworks(networks?: NetworkConfig[]): Promise<void>;
    notifyWalletContext(): Promise<void>;
    notifyClose(error?: ProviderRpcError): void;
    isSignedIn: () => Promise<boolean>;
    getAccount: () => Promise<Account | null>;
    setAccount(account: Account | null | undefined): void;
    private handleConfirmWalletDeployPrompt;
}
export interface WalletUserPrompter {
    getDefaultChainId(): number;
    promptConnect(options?: ConnectOptions): Promise<PromptConnectDetails>;
    promptSignInConnect(options?: ConnectOptions): Promise<PromptConnectDetails>;
    promptSignMessage(message: MessageToSign, options?: ConnectOptions): Promise<string>;
    promptSignTransaction(txn: commons.transaction.Transactionish, chainId?: number, options?: ConnectOptions): Promise<string>;
    promptSendTransaction(txn: commons.transaction.Transactionish, chainId?: number, options?: ConnectOptions): Promise<string>;
    promptConfirmWalletDeploy(chainId: number, options?: ConnectOptions): Promise<boolean>;
    promptChangeNetwork(chainId: number): Promise<boolean>;
}
