import { ethers } from 'ethers';
import { ChainIdLike } from '@0xsequence/network';
import { TypedData } from '@0xsequence/utils';
import { SequenceSigner } from "../signer.js";
/**
 *  This class is redundant with the SequenceSigner class, but it is here for now to
 *  maintain compatibility with the old wallet API. Eventually we should move these
 *  methods to the SequenceSigner class and deprecate this class.
 */
export declare class WalletUtils {
    signer: SequenceSigner;
    constructor(signer: SequenceSigner);
    signMessage(message: ethers.BytesLike, chainId?: ChainIdLike, eip6492?: boolean): Promise<string>;
    signTypedData(domain: ethers.TypedDataDomain, types: Record<string, Array<ethers.TypedDataField>>, message: Record<string, any>, chainId?: ChainIdLike, eip6492?: boolean): Promise<string>;
    isValidSignature(address: string, digest: Uint8Array, signature: string, chainId: number): Promise<boolean>;
    isValidMessageSignature(address: string, message: string | Uint8Array, signature: string, chainId: number): Promise<boolean>;
    isValidTypedDataSignature(address: string, typedData: TypedData, signature: string, chainId: number): Promise<boolean>;
}
