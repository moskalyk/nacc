import { ProviderTransport, ProviderMessage, ProviderMessageRequest, ProviderEventTypes, ProviderMessageResponse, ProviderMessageResponseCallback, OpenState, OpenWalletIntent, ConnectDetails, WalletSession, ProviderRpcError, InitState, TypedEventEmitter } from "../types.js";
import { NetworkConfig } from '@0xsequence/network';
import { commons } from '@0xsequence/core';
export declare const PROVIDER_OPEN_TIMEOUT = 30000;
export declare const nextMessageIdx: () => number;
export declare abstract class BaseProviderTransport implements ProviderTransport {
    protected pendingMessageRequests: ProviderMessageRequest[];
    protected responseCallbacks: Map<number, ProviderMessageResponseCallback>;
    protected state: OpenState;
    protected confirmationOnly: boolean;
    protected events: TypedEventEmitter<ProviderEventTypes>;
    protected openPayload: {
        sessionId?: string;
        session?: WalletSession;
    } | undefined;
    protected connectPayload: ConnectDetails | undefined;
    protected accountsChangedPayload: {
        accounts: string[];
        origin?: string;
    } | undefined;
    protected networksPayload: NetworkConfig[] | undefined;
    protected walletContextPayload: commons.context.VersionedContext | undefined;
    protected _sessionId?: string;
    protected _init: InitState;
    protected _registered: boolean;
    constructor();
    get registered(): boolean;
    register(): void;
    unregister(): void;
    openWallet(path?: string, intent?: OpenWalletIntent, networkId?: string | number): void;
    closeWallet(): void;
    isOpened(): boolean;
    isConnected(): boolean;
    request(request: {
        method: string;
        params?: any[];
        chainId?: number;
    }): Promise<any>;
    handleMessage(message: ProviderMessage<any>): void;
    sendMessageRequest: (message: ProviderMessageRequest) => Promise<ProviderMessageResponse>;
    sendMessage(message: ProviderMessage<any>): void;
    on<K extends keyof ProviderEventTypes>(event: K, fn: ProviderEventTypes[K]): void;
    once<K extends keyof ProviderEventTypes>(event: K, fn: ProviderEventTypes[K]): void;
    emit<K extends keyof ProviderEventTypes>(event: K, ...args: Parameters<ProviderEventTypes[K]>): boolean;
    waitUntilOpened: (openTimeout?: number) => Promise<WalletSession | undefined>;
    waitUntilConnected: () => Promise<ConnectDetails>;
    protected close(error?: ProviderRpcError): void;
}
