import { ProviderMessage, ProviderTransport, ProviderEventTypes, ProviderMessageRequest, ProviderMessageResponse, WalletSession, OpenWalletIntent, ConnectDetails } from "../../types.js";
import { ProxyMessageChannelPort } from "../proxy-transport/index.js";
import { Runtime } from 'webextension-polyfill';
export type MuxTransportTemplate = {
    walletAppURL?: string;
    windowTransport?: {
        enabled: boolean;
    };
    proxyTransport?: {
        enabled: boolean;
        appPort?: ProxyMessageChannelPort;
    };
    extensionTransport?: {
        enabled: boolean;
        runtime: Runtime.Static;
    };
    unrealTransport?: {
        enabled: boolean;
    };
};
export declare function isMuxTransportTemplate(obj: any): obj is MuxTransportTemplate;
export declare class MuxMessageProvider implements ProviderTransport {
    private messageProviders;
    private provider;
    constructor(...messageProviders: ProviderTransport[]);
    static new(template: MuxTransportTemplate): MuxMessageProvider;
    add(...messageProviders: ProviderTransport[]): void;
    register: () => void;
    unregister: () => void;
    openWallet: (path?: string, intent?: OpenWalletIntent, networkId?: string | number) => void;
    closeWallet(): void;
    isOpened(): boolean;
    isConnected(): boolean;
    on<K extends keyof ProviderEventTypes>(event: K, fn: ProviderEventTypes[K]): void;
    once<K extends keyof ProviderEventTypes>(event: K, fn: ProviderEventTypes[K]): void;
    emit<K extends keyof ProviderEventTypes>(event: K, ...args: Parameters<ProviderEventTypes[K]>): boolean;
    request(request: {
        method: string;
        params?: any[];
        chainId?: number;
    }): Promise<any>;
    sendMessage(message: ProviderMessage<any>): void;
    sendMessageRequest: (message: ProviderMessageRequest) => Promise<ProviderMessageResponse>;
    handleMessage(message: ProviderMessage<any>): void;
    waitUntilOpened: () => Promise<WalletSession | undefined>;
    waitUntilConnected: () => Promise<ConnectDetails>;
}
