import { ethers } from 'ethers';
import { AccountStatus } from '@0xsequence/account';
import { TypedData } from '@0xsequence/utils';
export declare const messageToBytes: (message: ethers.BytesLike) => Uint8Array;
export declare const prefixEIP191Message: (message: ethers.BytesLike) => Uint8Array;
export declare const trimEIP191Prefix: (prefixedMessage: Uint8Array) => Uint8Array;
export declare const isValidSignature: (address: string, digest: Uint8Array, sig: string, provider: ethers.Provider) => Promise<boolean>;
export declare const isValidMessageSignature: (address: string, message: string | Uint8Array, signature: string, provider: ethers.Provider) => Promise<boolean>;
export declare const isValidTypedDataSignature: (address: string, typedData: TypedData, signature: string, provider: ethers.Provider) => Promise<boolean>;
export declare const isBrowserExtension: () => boolean;
export declare const isUnityPlugin: () => boolean;
export declare const isWalletUpToDate: (status: AccountStatus) => boolean;
export interface ItemStore {
    getItem(key: string): string | null;
    setItem(key: string, value: string): void;
    removeItem(key: string): void;
    onItemChange(key: string, cb: (value: string | null) => void): () => void;
}
export declare class MemoryItemStore implements ItemStore {
    private callbacks;
    private store;
    getItem(key: string): string | null;
    setItem(key: string, value: string): void;
    removeItem(key: string): void;
    onItemChange(key: string, cb: (value: string | null) => void): () => void;
}
export declare class LocalStorage implements ItemStore {
    private callbacks;
    static isAvailable(): boolean;
    constructor();
    getItem(key: string): string | null;
    setItem(key: string, value: string): void;
    removeItem(key: string): void;
    onItemChange(key: string, cb: (value: string | null) => void): () => void;
}
export declare function useBestStore(): ItemStore;
export declare function resolveArrayProperties<T>(object: Readonly<T> | Readonly<T>[]): Promise<T>;
