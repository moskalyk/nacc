import { commons } from '@0xsequence/core';
import { migrator } from '@0xsequence/migration';
import { ethers } from 'ethers';
import { ConfigTracker, PresignedConfig, PresignedConfigLink } from "../../tracker.js";
export declare class RemoteConfigTracker implements ConfigTracker, migrator.PresignedMigrationTracker {
    readonly onlyRecoverable: boolean;
    private readonly sessions;
    constructor(hostname: string, onlyRecoverable?: boolean);
    loadPresignedConfiguration(args: {
        wallet: string;
        fromImageHash: string;
        longestPath?: boolean;
    }): Promise<PresignedConfigLink[]>;
    savePresignedConfiguration(args: PresignedConfig): Promise<void>;
    saveWitnesses(args: {
        wallet: string;
        digest: string;
        chainId: ethers.BigNumberish;
        signatures: string[];
    }): Promise<void>;
    configOfImageHash(args: {
        imageHash: string;
    }): Promise<commons.config.Config | undefined>;
    saveWalletConfig(args: {
        config: commons.config.Config;
    }): Promise<void>;
    imageHashOfCounterfactualWallet(args: {
        wallet: string;
    }): Promise<{
        imageHash: string;
        context: commons.context.WalletContext;
    } | undefined>;
    saveCounterfactualWallet(args: {
        config: commons.config.Config;
        context: commons.context.WalletContext[];
    }): Promise<void>;
    walletsOfSigner(args: {
        signer: string;
    }): Promise<{
        wallet: string;
        proof: {
            digest: string;
            chainId: bigint;
            signature: string;
        };
    }[]>;
    getMigration(wallet: string, fromImageHash: string, fromVersion: number, chainId: ethers.BigNumberish): Promise<migrator.SignedMigration | undefined>;
    saveMigration(wallet: string, signed: migrator.SignedMigration, _contexts: commons.context.VersionedContext): Promise<void>;
}
