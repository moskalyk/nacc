
import { commons, v1, v2 } from '@0xsequence/core';
import { ethers } from 'ethers';
import { PlainNested, PlainNode, PlainV2Config, TrackerStore } from "./index.js";
export declare class MemoryTrackerStore implements TrackerStore {
    private configs;
    private v2Nodes;
    private counterfactualWallets;
    private payloads;
    private signatures;
    private migrations;
    loadConfig: (imageHash: string) => Promise<v1.config.WalletConfig | v2.config.WalletConfig | PlainV2Config | undefined>;
    saveConfig: (imageHash: string, config: v2.config.WalletConfig | v1.config.WalletConfig | PlainV2Config) => Promise<void>;
    loadV2Node: (nodeHash: string) => Promise<v2.config.Topology | PlainNode | PlainNested | undefined>;
    saveV2Node: (nodeHash: string, node: v2.config.Topology | PlainNode | PlainNested) => Promise<void>;
    loadCounterfactualWallet: (wallet: string) => Promise<{
        imageHash: string;
        context: commons.context.WalletContext;
    } | undefined>;
    saveCounterfactualWallet: (wallet: string, imageHash: string, context: commons.context.WalletContext) => Promise<void>;
    loadPayloadOfSubdigest: (subdigest: string) => Promise<commons.signature.SignedPayload | undefined>;
    savePayloadOfSubdigest: (subdigest: string, payload: commons.signature.SignedPayload) => Promise<void>;
    loadSubdigestsOfSigner: (signer: string) => Promise<string[]>;
    loadSignatureOfSubdigest: (signer: string, subdigest: string) => Promise<ethers.BytesLike | undefined>;
    saveSignatureOfSubdigest: (signer: string, subdigest: string, payload: ethers.BytesLike) => Promise<void>;
    loadMigrationsSubdigest: (wallet: string, fromVersion: number, toVersion: number) => Promise<{
        subdigest: string;
        toImageHash: string;
    }[]>;
    saveMigrationsSubdigest: (wallet: string, fromVersion: number, toVersion: number, subdigest: string, toImageHash: string) => Promise<void>;
}
