import { ConfigTracker, PresignedConfig, PresignedConfigLink } from "../tracker.js";
import { migrator } from '@0xsequence/migration';
import { commons } from '@0xsequence/core';
import { ethers } from 'ethers';
export declare function raceUntil<T>(promises: Promise<T>[], fallback: T, evalRes: (val: T) => boolean): Promise<T>;
export declare function allSafe<T>(promises: Promise<T>[], fallback: T): Promise<T[]>;
export declare class MultipleTracker implements migrator.PresignedMigrationTracker, ConfigTracker {
    private trackers;
    constructor(trackers: (migrator.PresignedMigrationTracker & ConfigTracker)[]);
    configOfImageHash(args: {
        imageHash: string;
    }): Promise<commons.config.Config | undefined>;
    saveWalletConfig(args: {
        config: commons.config.Config;
        skipTracker?: number;
    }): Promise<void>;
    imageHashOfCounterfactualWallet(args: {
        wallet: string;
    }): Promise<{
        imageHash: string;
        context: commons.context.WalletContext;
    } | undefined>;
    saveCounterfactualWallet(args: {
        config: commons.config.Config;
        context: commons.context.WalletContext[];
        skipTracker?: number;
    }): Promise<void>;
    walletsOfSigner(args: {
        signer: string;
    }): Promise<{
        wallet: string;
        proof: {
            digest: string;
            chainId: bigint;
            signature: string;
        };
    }[]>;
    saveWitnesses(args: {
        wallet: string;
        digest: string;
        chainId: ethers.BigNumberish;
        signatures: string[];
    }): Promise<void>;
    loadPresignedConfiguration(args: {
        wallet: string;
        fromImageHash: string;
        longestPath?: boolean | undefined;
    }): Promise<PresignedConfigLink[]>;
    savePresignedConfiguration(args: PresignedConfig): Promise<void>;
    getMigration(address: string, fromImageHash: string, fromVersion: number, chainId: ethers.BigNumberish): Promise<migrator.SignedMigration | undefined>;
    saveMigration(address: string, signed: migrator.SignedMigration, contexts: commons.context.VersionedContext): Promise<void>;
}
