'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

/* eslint-disable */
// sequence-api v0.4.0 d3f5f1338693d60d58f87bc408a076218201a097
// --
// Code generated by webrpc-gen@v0.18.7 with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=api.ridl -target=typescript -client -out=./clients/api.gen.ts

// WebRPC description and code-gen version
const WebRPCVersion = 'v1';

// Schema version of your RIDL schema
const WebRPCSchemaVersion = 'v0.4.0';

// Schema hash generated from your RIDL schema
const WebRPCSchemaHash = 'd3f5f1338693d60d58f87bc408a076218201a097';

//
// Types
//

let SortOrder = /*#__PURE__*/function (SortOrder) {
  SortOrder["DESC"] = "DESC";
  SortOrder["ASC"] = "ASC";
  return SortOrder;
}({});
let TokenType = /*#__PURE__*/function (TokenType) {
  TokenType["ERC20"] = "ERC20";
  TokenType["ERC721"] = "ERC721";
  TokenType["ERC1155"] = "ERC1155";
  return TokenType;
}({});
//
// Client
//
class API {
  constructor(hostname, fetch) {
    this.hostname = void 0;
    this.fetch = void 0;
    this.path = '/rpc/API/';
    this.ping = (headers, signal) => {
      return this.fetch(this.url('Ping'), createHTTPRequest({}, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.version = (headers, signal) => {
      return this.fetch(this.url('Version'), createHTTPRequest({}, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            version: _data.version
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.runtimeStatus = (headers, signal) => {
      return this.fetch(this.url('RuntimeStatus'), createHTTPRequest({}, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.clock = (headers, signal) => {
      return this.fetch(this.url('Clock'), createHTTPRequest({}, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            serverTime: _data.serverTime
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getSequenceContext = (headers, signal) => {
      return this.fetch(this.url('GetSequenceContext'), createHTTPRequest({}, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            data: _data.data
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getAuthToken = (args, headers, signal) => {
      return this.fetch(this.url('GetAuthToken'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status,
            jwtToken: _data.jwtToken,
            address: _data.address,
            user: _data.user
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getAuthToken2 = (args, headers, signal) => {
      return this.fetch(this.url('GetAuthToken2'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status,
            jwtToken: _data.jwtToken,
            address: _data.address,
            user: _data.user
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.sendPasswordlessLink = (args, headers, signal) => {
      return this.fetch(this.url('SendPasswordlessLink'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.friendList = (args, headers, signal) => {
      return this.fetch(this.url('FriendList'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            page: _data.page,
            friends: _data.friends
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getFriendByAddress = (args, headers, signal) => {
      return this.fetch(this.url('GetFriendByAddress'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status,
            friend: _data.friend
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.searchFriends = (args, headers, signal) => {
      return this.fetch(this.url('SearchFriends'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            friends: _data.friends
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.addFriend = (args, headers, signal) => {
      return this.fetch(this.url('AddFriend'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status,
            friend: _data.friend
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.updateFriendNickname = (args, headers, signal) => {
      return this.fetch(this.url('UpdateFriendNickname'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status,
            friend: _data.friend
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.removeFriend = (args, headers, signal) => {
      return this.fetch(this.url('RemoveFriend'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.contractCall = (args, headers, signal) => {
      return this.fetch(this.url('ContractCall'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            returns: _data.returns
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.decodeContractCall = (args, headers, signal) => {
      return this.fetch(this.url('DecodeContractCall'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            call: _data.call
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.lookupContractCallSelectors = (args, headers, signal) => {
      return this.fetch(this.url('LookupContractCallSelectors'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            signatures: _data.signatures
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.userStorageFetch = (args, headers, signal) => {
      return this.fetch(this.url('UserStorageFetch'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            object: _data.object
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.userStorageSave = (args, headers, signal) => {
      return this.fetch(this.url('UserStorageSave'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.userStorageDelete = (args, headers, signal) => {
      return this.fetch(this.url('UserStorageDelete'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.userStorageFetchAll = (args, headers, signal) => {
      return this.fetch(this.url('UserStorageFetchAll'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            objects: _data.objects
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getMoonpayLink = (args, headers, signal) => {
      return this.fetch(this.url('GetMoonpayLink'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            signedUrl: _data.signedUrl
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getSardineClientToken = (headers, signal) => {
      return this.fetch(this.url('GetSardineClientToken'), createHTTPRequest({}, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            token: _data.token
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getSardineNFTCheckoutToken = (args, headers, signal) => {
      return this.fetch(this.url('GetSardineNFTCheckoutToken'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            resp: _data.resp
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getSardineNFTCheckoutOrderStatus = (args, headers, signal) => {
      return this.fetch(this.url('GetSardineNFTCheckoutOrderStatus'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            resp: _data.resp
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.resolveENSAddress = (args, headers, signal) => {
      return this.fetch(this.url('ResolveENSAddress'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            address: _data.address,
            ok: _data.ok
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.isValidSignature = (args, headers, signal) => {
      return this.fetch(this.url('IsValidSignature'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            isValid: _data.isValid
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.isValidMessageSignature = (args, headers, signal) => {
      return this.fetch(this.url('IsValidMessageSignature'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            isValid: _data.isValid
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.isValidTypedDataSignature = (args, headers, signal) => {
      return this.fetch(this.url('IsValidTypedDataSignature'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            isValid: _data.isValid
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.isValidETHAuthProof = (args, headers, signal) => {
      return this.fetch(this.url('IsValidETHAuthProof'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            isValid: _data.isValid
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getCoinPrices = (args, headers, signal) => {
      return this.fetch(this.url('GetCoinPrices'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            tokenPrices: _data.tokenPrices
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getCollectiblePrices = (args, headers, signal) => {
      return this.fetch(this.url('GetCollectiblePrices'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            tokenPrices: _data.tokenPrices
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getExchangeRate = (args, headers, signal) => {
      return this.fetch(this.url('GetExchangeRate'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            exchangeRate: _data.exchangeRate
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.memoryStore = (args, headers, signal) => {
      return this.fetch(this.url('MemoryStore'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.memoryLoad = (args, headers, signal) => {
      return this.fetch(this.url('MemoryLoad'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            value: _data.value
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getInviteInfo = (headers, signal) => {
      return this.fetch(this.url('GetInviteInfo'), createHTTPRequest({}, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            inviteInfo: _data.inviteInfo
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.isValidAccessCode = (args, headers, signal) => {
      return this.fetch(this.url('IsValidAccessCode'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.internalClaimAccessCode = (args, headers, signal) => {
      return this.fetch(this.url('InternalClaimAccessCode'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.blockNumberAtTime = (args, headers, signal) => {
      return this.fetch(this.url('BlockNumberAtTime'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            blocks: _data.blocks
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.paperSessionSecret = (args, headers, signal) => {
      return this.fetch(this.url('PaperSessionSecret'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            secret: _data.secret
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.paperSessionSecret2 = (args, headers, signal) => {
      return this.fetch(this.url('PaperSessionSecret2'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            secret: _data.secret
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.linkWallet = (args, headers, signal) => {
      return this.fetch(this.url('LinkWallet'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status,
            linkedWalletAddress: _data.linkedWalletAddress
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getLinkedWallets = (args, headers, signal) => {
      return this.fetch(this.url('GetLinkedWallets'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            linkedWallets: _data.linkedWallets
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.removeLinkedWallet = (args, headers, signal) => {
      return this.fetch(this.url('RemoveLinkedWallet'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.generateWaaSVerificationURL = (args, headers, signal) => {
      return this.fetch(this.url('GenerateWaaSVerificationURL'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            nonce: _data.nonce,
            verificationURL: _data.verificationURL
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.validateWaaSVerificationNonce = (args, headers, signal) => {
      return this.fetch(this.url('ValidateWaaSVerificationNonce'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            walletAddress: _data.walletAddress
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getSwapQuotes = (args, headers, signal) => {
      return this.fetch(this.url('GetSwapQuotes'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            swapQuotes: _data.swapQuotes
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.addCurrencyGroup = (args, headers, signal) => {
      return this.fetch(this.url('AddCurrencyGroup'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            groupId: _data.groupId
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.updateCurrencyGroup = (args, headers, signal) => {
      return this.fetch(this.url('UpdateCurrencyGroup'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {};
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.listCurrencyGroups = (headers, signal) => {
      return this.fetch(this.url('ListCurrencyGroups'), createHTTPRequest({}, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            currencyGroups: _data.currencyGroups
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.deleteCurrencyGroup = (args, headers, signal) => {
      return this.fetch(this.url('DeleteCurrencyGroup'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.addInventoryPaymentConfig = (args, headers, signal) => {
      return this.fetch(this.url('AddInventoryPaymentConfig'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            configId: _data.configId
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getInventoryPaymentConfig = (args, headers, signal) => {
      return this.fetch(this.url('GetInventoryPaymentConfig'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            config: _data.config
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.listInventoryPaymentConfigs = (args, headers, signal) => {
      return this.fetch(this.url('ListInventoryPaymentConfigs'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            configs: _data.configs
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.updateInventoryPaymentConfig = (args, headers, signal) => {
      return this.fetch(this.url('UpdateInventoryPaymentConfig'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {};
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.deleteInventoryPaymentConfig = (args, headers, signal) => {
      return this.fetch(this.url('DeleteInventoryPaymentConfig'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.requestInventoryPayment = (args, headers, signal) => {
      return this.fetch(this.url('RequestInventoryPayment'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            payment: _data.payment
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.hostname = hostname;
    this.fetch = (input, init) => fetch(input, init);
  }
  url(name) {
    return this.hostname + this.path + name;
  }
}
const createHTTPRequest = (body = {}, headers = {}, signal = null) => {
  return {
    method: 'POST',
    headers: _extends({}, headers, {
      'Content-Type': 'application/json'
    }),
    body: JSON.stringify(body || {}),
    signal
  };
};
const buildResponse = res => {
  return res.text().then(text => {
    let data;
    try {
      data = JSON.parse(text);
    } catch (error) {
      let message = '';
      if (error instanceof Error) {
        message = error.message;
      }
      throw WebrpcBadResponseError.new({
        status: res.status,
        cause: `JSON.parse(): ${message}: response text: ${text}`
      });
    }
    if (!res.ok) {
      const code = typeof data.code === 'number' ? data.code : 0;
      throw (webrpcErrorByCode[code] || WebrpcError).new(data);
    }
    return data;
  });
};

//
// Errors
//

class WebrpcError extends Error {
  constructor(name, code, message, status, cause) {
    super(message);
    this.name = void 0;
    this.code = void 0;
    this.message = void 0;
    this.status = void 0;
    this.cause = void 0;
    /** @deprecated Use message instead of msg. Deprecated in webrpc v0.11.0. */
    this.msg = void 0;
    this.name = name || 'WebrpcError';
    this.code = typeof code === 'number' ? code : 0;
    this.message = message || `endpoint error ${this.code}`;
    this.msg = this.message;
    this.status = typeof status === 'number' ? status : 0;
    this.cause = cause;
    Object.setPrototypeOf(this, WebrpcError.prototype);
  }
  static new(payload) {
    return new this(payload.error, payload.code, payload.message || payload.msg, payload.status, payload.cause);
  }
}

// Webrpc errors

class WebrpcEndpointError extends WebrpcError {
  constructor(name = 'WebrpcEndpoint', code = 0, message = 'endpoint error', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcEndpointError.prototype);
  }
}
class WebrpcRequestFailedError extends WebrpcError {
  constructor(name = 'WebrpcRequestFailed', code = -1, message = 'request failed', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcRequestFailedError.prototype);
  }
}
class WebrpcBadRouteError extends WebrpcError {
  constructor(name = 'WebrpcBadRoute', code = -2, message = 'bad route', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcBadRouteError.prototype);
  }
}
class WebrpcBadMethodError extends WebrpcError {
  constructor(name = 'WebrpcBadMethod', code = -3, message = 'bad method', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcBadMethodError.prototype);
  }
}
class WebrpcBadRequestError extends WebrpcError {
  constructor(name = 'WebrpcBadRequest', code = -4, message = 'bad request', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcBadRequestError.prototype);
  }
}
class WebrpcBadResponseError extends WebrpcError {
  constructor(name = 'WebrpcBadResponse', code = -5, message = 'bad response', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcBadResponseError.prototype);
  }
}
class WebrpcServerPanicError extends WebrpcError {
  constructor(name = 'WebrpcServerPanic', code = -6, message = 'server panic', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcServerPanicError.prototype);
  }
}
class WebrpcInternalErrorError extends WebrpcError {
  constructor(name = 'WebrpcInternalError', code = -7, message = 'internal error', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcInternalErrorError.prototype);
  }
}
class WebrpcClientDisconnectedError extends WebrpcError {
  constructor(name = 'WebrpcClientDisconnected', code = -8, message = 'client disconnected', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcClientDisconnectedError.prototype);
  }
}
class WebrpcStreamLostError extends WebrpcError {
  constructor(name = 'WebrpcStreamLost', code = -9, message = 'stream lost', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcStreamLostError.prototype);
  }
}
class WebrpcStreamFinishedError extends WebrpcError {
  constructor(name = 'WebrpcStreamFinished', code = -10, message = 'stream finished', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcStreamFinishedError.prototype);
  }
}

// Schema errors

class UnauthorizedError extends WebrpcError {
  constructor(name = 'Unauthorized', code = 1000, message = 'Unauthorized access', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, UnauthorizedError.prototype);
  }
}
class PermissionDeniedError extends WebrpcError {
  constructor(name = 'PermissionDenied', code = 1001, message = 'Permission denied', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, PermissionDeniedError.prototype);
  }
}
class SessionExpiredError extends WebrpcError {
  constructor(name = 'SessionExpired', code = 1002, message = 'Session expired', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, SessionExpiredError.prototype);
  }
}
class AbortedError extends WebrpcError {
  constructor(name = 'Aborted', code = 1005, message = 'Request aborted', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, AbortedError.prototype);
  }
}
class GeoblockedError extends WebrpcError {
  constructor(name = 'Geoblocked', code = 1006, message = 'Geoblocked region', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, GeoblockedError.prototype);
  }
}
class InvalidArgumentError extends WebrpcError {
  constructor(name = 'InvalidArgument', code = 2000, message = 'Invalid argument', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, InvalidArgumentError.prototype);
  }
}
class UnavailableError extends WebrpcError {
  constructor(name = 'Unavailable', code = 2002, message = 'Unavailable resource', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, UnavailableError.prototype);
  }
}
class QueryFailedError extends WebrpcError {
  constructor(name = 'QueryFailed', code = 2003, message = 'Query failed', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, QueryFailedError.prototype);
  }
}
class NotFoundError extends WebrpcError {
  constructor(name = 'NotFound', code = 3000, message = 'Resource not found', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, NotFoundError.prototype);
  }
}
let errors = /*#__PURE__*/function (errors) {
  errors["WebrpcEndpoint"] = "WebrpcEndpoint";
  errors["WebrpcRequestFailed"] = "WebrpcRequestFailed";
  errors["WebrpcBadRoute"] = "WebrpcBadRoute";
  errors["WebrpcBadMethod"] = "WebrpcBadMethod";
  errors["WebrpcBadRequest"] = "WebrpcBadRequest";
  errors["WebrpcBadResponse"] = "WebrpcBadResponse";
  errors["WebrpcServerPanic"] = "WebrpcServerPanic";
  errors["WebrpcInternalError"] = "WebrpcInternalError";
  errors["WebrpcClientDisconnected"] = "WebrpcClientDisconnected";
  errors["WebrpcStreamLost"] = "WebrpcStreamLost";
  errors["WebrpcStreamFinished"] = "WebrpcStreamFinished";
  errors["Unauthorized"] = "Unauthorized";
  errors["PermissionDenied"] = "PermissionDenied";
  errors["SessionExpired"] = "SessionExpired";
  errors["Aborted"] = "Aborted";
  errors["Geoblocked"] = "Geoblocked";
  errors["InvalidArgument"] = "InvalidArgument";
  errors["Unavailable"] = "Unavailable";
  errors["QueryFailed"] = "QueryFailed";
  errors["NotFound"] = "NotFound";
  return errors;
}({});
const webrpcErrorByCode = {
  [0]: WebrpcEndpointError,
  [-1]: WebrpcRequestFailedError,
  [-2]: WebrpcBadRouteError,
  [-3]: WebrpcBadMethodError,
  [-4]: WebrpcBadRequestError,
  [-5]: WebrpcBadResponseError,
  [-6]: WebrpcServerPanicError,
  [-7]: WebrpcInternalErrorError,
  [-8]: WebrpcClientDisconnectedError,
  [-9]: WebrpcStreamLostError,
  [-10]: WebrpcStreamFinishedError,
  [1000]: UnauthorizedError,
  [1001]: PermissionDeniedError,
  [1002]: SessionExpiredError,
  [1005]: AbortedError,
  [1006]: GeoblockedError,
  [2000]: InvalidArgumentError,
  [2002]: UnavailableError,
  [2003]: QueryFailedError,
  [3000]: NotFoundError
};

const fetch = globalThis.fetch;
class SequenceAPIClient extends API {
  constructor(hostname, projectAccessKey, jwtAuth) {
    super(hostname.endsWith('/') ? hostname.slice(0, -1) : hostname, fetch);
    this.projectAccessKey = projectAccessKey;
    this.jwtAuth = jwtAuth;
    this._fetch = (input, init) => {
      // automatically include jwt and access key auth header to requests
      // if its been set on the api client
      const headers = {};
      const jwtAuth = this.jwtAuth;
      const projectAccessKey = this.projectAccessKey;
      if (jwtAuth && jwtAuth.length > 0) {
        headers['Authorization'] = `BEARER ${jwtAuth}`;
      }
      if (projectAccessKey && projectAccessKey.length > 0) {
        headers['X-Access-Key'] = projectAccessKey;
      }

      // before the request is made
      init.headers = _extends({}, init.headers, headers);
      return fetch(input, init);
    };
    this.fetch = this._fetch;
  }
}

exports.API = API;
exports.AbortedError = AbortedError;
exports.GeoblockedError = GeoblockedError;
exports.InvalidArgumentError = InvalidArgumentError;
exports.NotFoundError = NotFoundError;
exports.PermissionDeniedError = PermissionDeniedError;
exports.QueryFailedError = QueryFailedError;
exports.SequenceAPIClient = SequenceAPIClient;
exports.SessionExpiredError = SessionExpiredError;
exports.SortOrder = SortOrder;
exports.TokenType = TokenType;
exports.UnauthorizedError = UnauthorizedError;
exports.UnavailableError = UnavailableError;
exports.WebRPCSchemaHash = WebRPCSchemaHash;
exports.WebRPCSchemaVersion = WebRPCSchemaVersion;
exports.WebRPCVersion = WebRPCVersion;
exports.WebrpcBadMethodError = WebrpcBadMethodError;
exports.WebrpcBadRequestError = WebrpcBadRequestError;
exports.WebrpcBadResponseError = WebrpcBadResponseError;
exports.WebrpcBadRouteError = WebrpcBadRouteError;
exports.WebrpcClientDisconnectedError = WebrpcClientDisconnectedError;
exports.WebrpcEndpointError = WebrpcEndpointError;
exports.WebrpcError = WebrpcError;
exports.WebrpcInternalErrorError = WebrpcInternalErrorError;
exports.WebrpcRequestFailedError = WebrpcRequestFailedError;
exports.WebrpcServerPanicError = WebrpcServerPanicError;
exports.WebrpcStreamFinishedError = WebrpcStreamFinishedError;
exports.WebrpcStreamLostError = WebrpcStreamLostError;
exports.errors = errors;
