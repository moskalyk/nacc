import { commons } from '@0xsequence/core';
import { signers, Status } from '@0xsequence/signhub';
import { ethers } from 'ethers';
import { Wallet } from "../wallet.js";
export declare class SequenceOrchestratorWrapper implements signers.SapientSigner {
    wallet: Wallet<any, any, any>;
    constructor(wallet: Wallet<any, any, any>);
    getAddress(): Promise<string>;
    buildDeployTransaction(metadata: object): Promise<commons.transaction.TransactionBundle | undefined>;
    predecorateSignedTransactions(_metadata: object): Promise<commons.transaction.SignedTransactionBundle[]>;
    decorateTransactions(bundle: commons.transaction.IntendedTransactionBundle, _metadata: object): Promise<commons.transaction.IntendedTransactionBundle>;
    sign(message: ethers.BytesLike, metadata: object): Promise<ethers.BytesLike>;
    notifyStatusChange(_i: string, _s: Status, _m: object): void;
    suffix(): ethers.BytesLike;
}
