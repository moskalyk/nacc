import { ethers } from 'ethers';
import { JsonRpcMiddleware, JsonRpcMiddlewareHandler, EIP1193Provider, JsonRpcSender } from "./json-rpc/index.js";
export interface JsonRpcProviderOptions {
    chainId?: number;
    middlewares?: Array<JsonRpcMiddleware | JsonRpcMiddlewareHandler>;
    blockCache?: boolean | string[];
}
export declare class JsonRpcProvider extends ethers.JsonRpcProvider implements EIP1193Provider, JsonRpcSender {
    #private;
    url: string | ethers.FetchRequest | undefined;
    constructor(url: string | ethers.FetchRequest | undefined, options?: JsonRpcProviderOptions, jsonRpcApiProviderOptions?: ethers.JsonRpcApiProviderOptions);
    request(request: {
        method: string;
        params?: any[];
        chainId?: number;
    }): Promise<any>;
    send(method: string, params?: any[] | Record<string, any>, chainId?: number): Promise<any>;
    getNetwork(): Promise<ethers.Network>;
    private fetch;
}
