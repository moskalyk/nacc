import { ethers } from 'ethers';
import { Indexer } from '@0xsequence/indexer';
import { Relayer, RpcRelayerOptions } from '@0xsequence/relayer';
import { ChainId, NetworkMetadata } from "./constants.js";
export type NetworkConfig = NetworkMetadata & {
    rpcUrl: string;
    provider?: ethers.Provider;
    indexerUrl?: string;
    indexer?: Indexer;
    relayer?: Relayer | RpcRelayerOptions;
    isDefaultChain?: boolean;
    disabled?: boolean;
};
export declare const indexerURL: (network: string) => string;
export declare const relayerURL: (network: string) => string;
export declare const nodesURL: (network: string) => string;
export declare function findSupportedNetwork(chainIdOrName: string | ChainIdLike): NetworkConfig | undefined;
export type ChainIdLike = NetworkConfig | ethers.BigNumberish;
export declare function toChainIdNumber(chainIdLike: ChainIdLike): bigint;
export declare const hardhatNetworks: {
    rpcUrl: string;
    relayer: {
        url: string;
        provider: {
            url: string;
        };
    };
    chainId: ChainId;
    type?: import("./constants.js").NetworkType | undefined;
    name: string;
    title?: string | undefined;
    logoURI?: string | undefined;
    blockExplorer?: import("./constants.js").BlockExplorerConfig | undefined;
    ensAddress?: string | undefined;
    testnet?: boolean | undefined;
    deprecated?: boolean | undefined;
    nativeToken: {
        symbol: string;
        name: string;
        decimals: number;
    };
}[];
export declare const allNetworks: NetworkConfig[];
