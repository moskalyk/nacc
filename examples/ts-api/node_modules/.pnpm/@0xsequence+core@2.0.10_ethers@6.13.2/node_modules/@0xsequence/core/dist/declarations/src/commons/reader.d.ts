import { ethers } from 'ethers';
/**
 * Provides stateful information about the wallet.
 */
export interface Reader {
    isDeployed(wallet: string): Promise<boolean>;
    implementation(wallet: string): Promise<string | undefined>;
    imageHash(wallet: string): Promise<string | undefined>;
    nonce(wallet: string, space: ethers.BigNumberish): Promise<ethers.BigNumberish>;
    isValidSignature(wallet: string, digest: ethers.BytesLike, signature: ethers.BytesLike): Promise<boolean>;
}
/**
 * The OnChainReader class fetches on-chain data from a wallet.
 * It is used to understand the "real" state of the wallet contract on-chain.
 */
export declare class OnChainReader implements Reader {
    readonly provider: ethers.Provider;
    private isDeployedCache;
    constructor(provider: ethers.Provider);
    private module;
    isDeployed(wallet: string): Promise<boolean>;
    implementation(wallet: string): Promise<string | undefined>;
    imageHash(wallet: string): Promise<string | undefined>;
    nonce(wallet: string, space?: ethers.BigNumberish): Promise<ethers.BigNumberish>;
    isValidSignature(wallet: string, digest: ethers.BytesLike, signature: ethers.BytesLike): Promise<boolean>;
}
