import { ethers } from 'ethers';
import { FeeOption, FeeQuote, Relayer } from "./index.js";
import { ProviderRelayer, ProviderRelayerOptions } from "./provider-relayer.js";
import { commons } from '@0xsequence/core';
export type LocalRelayerOptions = Omit<ProviderRelayerOptions, 'provider'> & {
    signer: ethers.Signer;
};
export declare function isLocalRelayerOptions(obj: any): obj is LocalRelayerOptions;
export declare class LocalRelayer extends ProviderRelayer implements Relayer {
    private signer;
    private txnOptions;
    constructor(options: LocalRelayerOptions | ethers.AbstractSigner);
    getFeeOptions(_address: string, ..._transactions: commons.transaction.Transaction[]): Promise<{
        options: FeeOption[];
    }>;
    getFeeOptionsRaw(_entrypoint: string, _data: ethers.BytesLike, _options?: {
        simulate?: boolean;
    }): Promise<{
        options: FeeOption[];
    }>;
    gasRefundOptions(address: string, ...transactions: commons.transaction.Transaction[]): Promise<FeeOption[]>;
    setTransactionOptions(transactionRequest: ethers.TransactionRequest): void;
    relay(signedTxs: commons.transaction.IntendedTransactionBundle, quote?: FeeQuote, waitForReceipt?: boolean): Promise<commons.transaction.TransactionResponse<ethers.TransactionReceipt>>;
}
