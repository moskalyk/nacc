import { ethers } from 'ethers';
import { proto } from "./rpc-relayer/index.js";
import { commons } from '@0xsequence/core';
export interface Relayer {
    simulate(wallet: string, ...transactions: commons.transaction.Transaction[]): Promise<SimulateResult[]>;
    getFeeOptions(address: string, ...transactions: commons.transaction.Transaction[]): Promise<{
        options: FeeOption[];
        quote?: FeeQuote;
    }>;
    getFeeOptionsRaw(entrypoint: string, data: ethers.BytesLike, options?: {
        simulate?: boolean;
    }): Promise<{
        options: FeeOption[];
        quote?: FeeQuote;
    }>;
    gasRefundOptions(address: string, ...transactions: commons.transaction.Transaction[]): Promise<FeeOption[]>;
    getNonce(address: string, space?: ethers.BigNumberish, blockTag?: ethers.BlockTag): Promise<ethers.BigNumberish>;
    relay(signedTxs: commons.transaction.IntendedTransactionBundle, quote?: FeeQuote, waitForReceipt?: boolean): Promise<commons.transaction.TransactionResponse>;
    wait(metaTxnId: string | commons.transaction.SignedTransactionBundle, timeout?: number, delay?: number, maxFails?: number): Promise<commons.transaction.TransactionResponse>;
}
export * from "./local-relayer.js";
export * from "./provider-relayer.js";
export * from "./rpc-relayer/index.js";
export { proto as RpcRelayerProto } from "./rpc-relayer/index.js";
export type SimulateResult = proto.SimulateResult;
export type FeeOption = proto.FeeOption;
export interface FeeQuote {
    _tag: 'FeeQuote';
    _quote: unknown;
}
export declare function isRelayer(cand: any): cand is Relayer;
