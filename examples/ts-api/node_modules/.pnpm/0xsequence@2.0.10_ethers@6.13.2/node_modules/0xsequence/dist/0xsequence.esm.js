import * as abi$1 from '@0xsequence/abi';
import * as api$1 from '@0xsequence/api';
import * as auth$1 from '@0xsequence/auth';
import * as guard$1 from '@0xsequence/guard';
import * as indexer$1 from '@0xsequence/indexer';
import * as metadata$1 from '@0xsequence/metadata';
import * as network$1 from '@0xsequence/network';
import * as provider$1 from '@0xsequence/provider';
import { isValidSignature, isValidMessageSignature, isValidTypedDataSignature, isWalletUpToDate, initWallet, getWallet, unregisterWallet, SequenceProvider, SequenceClient, SequenceSigner } from '@0xsequence/provider';
export { initWallet } from '@0xsequence/provider';
import * as relayer$1 from '@0xsequence/relayer';
import * as core$1 from '@0xsequence/core';
import { commons } from '@0xsequence/core';
import * as utils$1 from '@0xsequence/utils';
import * as signhub$1 from '@0xsequence/signhub';
import * as sessions$1 from '@0xsequence/sessions';
import * as migration$1 from '@0xsequence/migration';
import * as account$1 from '@0xsequence/account';

function _mergeNamespaces(n, m) {
  m.forEach(function (e) {
    e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
      if (k !== 'default' && !(k in n)) {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  });
  return Object.freeze(n);
}

var abi = /*#__PURE__*/_mergeNamespaces({
  __proto__: null
}, [abi$1]);

var api = /*#__PURE__*/_mergeNamespaces({
  __proto__: null
}, [api$1]);

var auth = /*#__PURE__*/_mergeNamespaces({
  __proto__: null
}, [auth$1]);

var guard = /*#__PURE__*/_mergeNamespaces({
  __proto__: null
}, [guard$1]);

var indexer = /*#__PURE__*/_mergeNamespaces({
  __proto__: null
}, [indexer$1]);

var metadata = /*#__PURE__*/_mergeNamespaces({
  __proto__: null
}, [metadata$1]);

var network = /*#__PURE__*/_mergeNamespaces({
  __proto__: null
}, [network$1]);

var provider = /*#__PURE__*/_mergeNamespaces({
  __proto__: null
}, [provider$1]);

var relayer = /*#__PURE__*/_mergeNamespaces({
  __proto__: null
}, [relayer$1]);

const transactions = commons.transaction;

var transactions$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  transactions: transactions
});

var utils = /*#__PURE__*/_mergeNamespaces({
  __proto__: null,
  isValidSignature: isValidSignature,
  isValidMessageSignature: isValidMessageSignature,
  isValidTypedDataSignature: isValidTypedDataSignature,
  isWalletUpToDate: isWalletUpToDate
}, [utils$1]);

var core = /*#__PURE__*/_mergeNamespaces({
  __proto__: null
}, [core$1]);

var signhub = /*#__PURE__*/_mergeNamespaces({
  __proto__: null
}, [signhub$1]);

var sessions = /*#__PURE__*/_mergeNamespaces({
  __proto__: null
}, [sessions$1]);

var migration = /*#__PURE__*/_mergeNamespaces({
  __proto__: null
}, [migration$1]);

var account = /*#__PURE__*/_mergeNamespaces({
  __proto__: null
}, [account$1]);

var sequence = /*#__PURE__*/Object.freeze({
  __proto__: null,
  abi: abi,
  api: api,
  auth: auth,
  guard: guard,
  indexer: indexer,
  metadata: metadata,
  network: network,
  provider: provider,
  relayer: relayer,
  transactions: transactions$1,
  utils: utils,
  core: core,
  signhub: signhub,
  sessions: sessions,
  migration: migration,
  account: account,
  initWallet: initWallet,
  getWallet: getWallet,
  unregisterWallet: unregisterWallet,
  SequenceProvider: SequenceProvider,
  SequenceClient: SequenceClient,
  SequenceSigner: SequenceSigner
});

export { sequence };
