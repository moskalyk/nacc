import { Account } from '@0xsequence/account';
import { SequenceAPIClient } from '@0xsequence/api';
import { Indexer } from '@0xsequence/indexer';
import { SequenceMetadata } from '@0xsequence/metadata';
import { ChainIdLike } from '@0xsequence/network';
import { ethers } from 'ethers';
export type SessionMeta = {
    name: string;
    expiration?: number;
};
export type ServicesSettings = {
    metadata: SessionMeta;
    sequenceApiUrl: string;
    sequenceApiChainId: ethers.BigNumberish;
    sequenceMetadataUrl: string;
};
export type SessionJWT = {
    token: string;
    expiration: number;
};
export type SessionJWTPromise = {
    token: Promise<string>;
    expiration: number;
};
export type ProofStringPromise = {
    proofString: Promise<string>;
    expiration: number;
};
export declare const DEFAULT_SESSION_EXPIRATION: number;
export declare const LONG_SESSION_EXPIRATION = 30000000;
export declare class Services {
    readonly account: Account;
    readonly settings: ServicesSettings;
    readonly status: {
        jwt?: SessionJWTPromise;
        metadata?: SessionMeta;
    };
    _initialAuthRequest: Promise<SequenceAPIClient>;
    private readonly proofStrings;
    private onAuthCallbacks;
    private apiClient;
    private metadataClient;
    private indexerClients;
    private projectAccessKey?;
    constructor(account: Account, settings: ServicesSettings, status?: {
        jwt?: SessionJWTPromise;
        metadata?: SessionMeta;
    }, projectAccessKey?: string);
    private now;
    get expiration(): number;
    onAuth(cb: (result: PromiseSettledResult<string>) => void): () => ((result: PromiseSettledResult<string>) => void)[];
    dump(): Promise<{
        jwt?: SessionJWT;
        metadata?: SessionMeta;
    }>;
    auth(maxTries?: number): Promise<SequenceAPIClient>;
    private getJWT;
    private getProofStringKey;
    private isProofStringValid;
    getAPIClient(tryAuth?: boolean): Promise<SequenceAPIClient>;
    getMetadataClient(tryAuth?: boolean): Promise<SequenceMetadata>;
    getIndexerClient(chainId: ChainIdLike, tryAuth?: boolean): Promise<Indexer>;
    private getProofString;
}
