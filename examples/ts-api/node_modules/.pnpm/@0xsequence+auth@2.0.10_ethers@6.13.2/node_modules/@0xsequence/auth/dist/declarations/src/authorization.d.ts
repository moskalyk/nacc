import { ChainIdLike } from '@0xsequence/network';
import { TypedData } from '@0xsequence/utils';
import { Signer } from '@0xsequence/wallet';
import { Account } from '@0xsequence/account';
export interface AuthorizationOptions {
    app?: string;
    origin?: string;
    expiry?: number;
    nonce?: number;
}
export interface ETHAuthProof {
    typedData: TypedData;
    proofString: string;
}
export declare const signAuthorization: (signer: Signer | Account, chainId: ChainIdLike, options: AuthorizationOptions) => Promise<ETHAuthProof>;
export declare class AuthError extends Error {
    constructor(message?: string);
}
export declare const ErrAccountIsRequired: AuthError;
