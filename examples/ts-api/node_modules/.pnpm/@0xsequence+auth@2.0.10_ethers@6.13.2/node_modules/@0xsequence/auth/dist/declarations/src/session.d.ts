import { NetworkConfig } from '@0xsequence/network';
import { Account } from '@0xsequence/account';
import { ethers } from 'ethers';
import { tracker } from '@0xsequence/sessions';
import { SignatureOrchestrator, signers } from '@0xsequence/signhub';
import { migrator } from '@0xsequence/migration';
import { commons, v1 } from '@0xsequence/core';
import { Services, ServicesSettings, SessionJWT, SessionMeta } from "./services.js";
export interface SessionDumpV1 {
    config: Omit<v1.config.WalletConfig, 'version'> & {
        address?: string;
    };
    jwt?: SessionJWT;
    metadata: SessionMeta;
}
export interface SessionDumpV2 {
    version: 2;
    address: string;
    jwt?: SessionJWT;
    metadata?: SessionMeta;
}
export declare function isSessionDumpV1(obj: any): obj is SessionDumpV1;
export declare function isSessionDumpV2(obj: any): obj is SessionDumpV2;
export declare const CRITICAL_CHAINS: number[];
export type SessionSettings = {
    services?: ServicesSettings;
    contexts: commons.context.VersionedContext;
    networks: NetworkConfig[];
    tracker: tracker.ConfigTracker & migrator.PresignedMigrationTracker;
};
export declare const SessionSettingsDefault: SessionSettings;
export declare class Session {
    networks: NetworkConfig[];
    contexts: commons.context.VersionedContext;
    account: Account;
    services?: Services | undefined;
    constructor(networks: NetworkConfig[], contexts: commons.context.VersionedContext, account: Account, services?: Services | undefined);
    dump(): Promise<SessionDumpV2>;
    static singleSigner(args: {
        settings?: Partial<SessionSettings>;
        signer: ethers.Signer | signers.SapientSigner | string;
        selectWallet?: (wallets: string[]) => Promise<string | undefined>;
        onAccountAddress?: (address: string) => void;
        onMigration?: (account: Account) => Promise<boolean>;
        editConfigOnMigration?: (config: commons.config.Config) => commons.config.Config;
        projectAccessKey: string;
    }): Promise<Session>;
    static open(args: {
        settings?: Partial<SessionSettings>;
        orchestrator: SignatureOrchestrator;
        addSigners?: commons.config.SimpleSigner[];
        referenceSigner: string;
        threshold?: ethers.BigNumberish;
        selectWallet: (wallets: string[]) => Promise<string | undefined>;
        onAccountAddress?: (address: string) => void;
        editConfigOnMigration?: (config: commons.config.Config) => commons.config.Config;
        onMigration?: (account: Account) => Promise<boolean>;
        projectAccessKey?: string;
    }): Promise<Session>;
    static load(args: {
        settings?: Partial<SessionSettings>;
        orchestrator: SignatureOrchestrator;
        dump: SessionDumpV1 | SessionDumpV2;
        editConfigOnMigration: (config: commons.config.Config) => commons.config.Config;
        onMigration?: (account: Account) => Promise<boolean>;
    }): Promise<Session>;
}
