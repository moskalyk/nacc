'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

/* eslint-disable */
// sequence-metadata v0.4.0 9d0976f6ff345b6a688b69cff647454e7fd0e3a6
// --
// Code generated by webrpc-gen@v0.18.6 with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=metadata.ridl -target=typescript -client -out=./clients/metadata.gen.ts

// WebRPC description and code-gen version
const WebRPCVersion = 'v1';

// Schema version of your RIDL schema
const WebRPCSchemaVersion = 'v0.4.0';

// Schema hash generated from your RIDL schema
const WebRPCSchemaHash = '9d0976f6ff345b6a688b69cff647454e7fd0e3a6';

//
// Types
//

let ContractType = /*#__PURE__*/function (ContractType) {
  ContractType["UNKNOWN"] = "UNKNOWN";
  ContractType["ERC20"] = "ERC20";
  ContractType["ERC721"] = "ERC721";
  ContractType["ERC1155"] = "ERC1155";
  return ContractType;
}({});
let PropertyType = /*#__PURE__*/function (PropertyType) {
  PropertyType["INT"] = "INT";
  PropertyType["STRING"] = "STRING";
  PropertyType["ARRAY"] = "ARRAY";
  PropertyType["GENERIC"] = "GENERIC";
  return PropertyType;
}({});
let SwapType = /*#__PURE__*/function (SwapType) {
  SwapType["UNKNOWN"] = "UNKNOWN";
  SwapType["BUY"] = "BUY";
  SwapType["SELL"] = "SELL";
  return SwapType;
}({});
let TaskStatus = /*#__PURE__*/function (TaskStatus) {
  TaskStatus["PENDING"] = "PENDING";
  TaskStatus["PAUSED"] = "PAUSED";
  TaskStatus["FAILED"] = "FAILED";
  TaskStatus["COMPLETED"] = "COMPLETED";
  TaskStatus["DISABLED"] = "DISABLED";
  return TaskStatus;
}({});
//
// Client
//
class Metadata {
  constructor(hostname, fetch) {
    this.hostname = void 0;
    this.fetch = void 0;
    this.path = '/rpc/Metadata/';
    this.ping = (headers, signal) => {
      return this.fetch(this.url('Ping'), createHTTPRequest({}, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.version = (headers, signal) => {
      return this.fetch(this.url('Version'), createHTTPRequest({}, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            version: _data.version
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.runtimeStatus = (headers, signal) => {
      return this.fetch(this.url('RuntimeStatus'), createHTTPRequest({}, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getTokenMetadata = (args, headers, signal) => {
      return this.fetch(this.url('GetTokenMetadata'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            tokenMetadata: _data.tokenMetadata
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.refreshTokenMetadata = (args, headers, signal) => {
      return this.fetch(this.url('RefreshTokenMetadata'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            taskId: _data.taskId
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.enqueueTokensForRefresh = (args, headers, signal) => {
      return this.fetch(this.url('EnqueueTokensForRefresh'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            taskId: _data.taskId
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getTokenRefreshStatus = (args, headers, signal) => {
      return this.fetch(this.url('GetTokenRefreshStatus'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getTokenRefreshResult = (args, headers, signal) => {
      return this.fetch(this.url('GetTokenRefreshResult'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status,
            tokens: _data.tokens,
            failureReasons: _data.failureReasons
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.cancelRefreshJob = (args, headers, signal) => {
      return this.fetch(this.url('CancelRefreshJob'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getTokenMetadataBatch = (args, headers, signal) => {
      return this.fetch(this.url('GetTokenMetadataBatch'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractTokenMetadata: _data.contractTokenMetadata
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.searchTokenMetadata = (args, headers, signal) => {
      return this.fetch(this.url('SearchTokenMetadata'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            page: _data.page,
            tokenMetadata: _data.tokenMetadata
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.searchTokenIDs = (args, headers, signal) => {
      return this.fetch(this.url('SearchTokenIDs'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            page: _data.page,
            tokenIds: _data.tokenIds
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.tokenCollectionFilters = (args, headers, signal) => {
      return this.fetch(this.url('TokenCollectionFilters'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            filters: _data.filters
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getContractInfo = (args, headers, signal) => {
      return this.fetch(this.url('GetContractInfo'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractInfo: _data.contractInfo
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getContractInfoBatch = (args, headers, signal) => {
      return this.fetch(this.url('GetContractInfoBatch'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractInfoMap: _data.contractInfoMap
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.searchContractInfo = (args, headers, signal) => {
      return this.fetch(this.url('SearchContractInfo'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractInfoList: _data.contractInfoList
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.searchContractInfoBatch = (args, headers, signal) => {
      return this.fetch(this.url('SearchContractInfoBatch'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractInfoByChain: _data.contractInfoByChain
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.searchMetadata = (args, headers, signal) => {
      return this.fetch(this.url('SearchMetadata'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            tokenMetadata: _data.tokenMetadata,
            contractInfo: _data.contractInfo
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.searchTokens = (args, headers, signal) => {
      return this.fetch(this.url('SearchTokens'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            tokenMetadata: _data.tokenMetadata,
            nextPage: _data.nextPage
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.searchContracts = (args, headers, signal) => {
      return this.fetch(this.url('SearchContracts'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractInfo: _data.contractInfo,
            nextPage: _data.nextPage
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getNiftyswapTokenQuantity = (args, headers, signal) => {
      return this.fetch(this.url('GetNiftyswapTokenQuantity'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            quantity: _data.quantity
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getNiftyswapUnitPrices = (args, headers, signal) => {
      return this.fetch(this.url('GetNiftyswapUnitPrices'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            prices: _data.prices
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getNiftyswapUnitPricesWithQuantities = (args, headers, signal) => {
      return this.fetch(this.url('GetNiftyswapUnitPricesWithQuantities'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            prices: _data.prices
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.addContractToMintMonitor = (args, headers, signal) => {
      return this.fetch(this.url('AddContractToMintMonitor'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.removeContractFromMintMonitor = (args, headers, signal) => {
      return this.fetch(this.url('RemoveContractFromMintMonitor'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.mintMonitorJobStatus = (args, headers, signal) => {
      return this.fetch(this.url('MintMonitorJobStatus'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            task: _data.task
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.mintMonitorTriggerJob = (args, headers, signal) => {
      return this.fetch(this.url('MintMonitorTriggerJob'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.syncContractTokens = (args, headers, signal) => {
      return this.fetch(this.url('SyncContractTokens'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            taskID: _data.taskID
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.abortContractSync = (args, headers, signal) => {
      return this.fetch(this.url('AbortContractSync'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.contractSyncJobStatus = (args, headers, signal) => {
      return this.fetch(this.url('ContractSyncJobStatus'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            refreshTask: _data.refreshTask,
            syncTask: _data.syncTask
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.directoryGetNetworks = (args, headers, signal) => {
      return this.fetch(this.url('DirectoryGetNetworks'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            networks: _data.networks
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.directoryGetCollections = (args, headers, signal) => {
      return this.fetch(this.url('DirectoryGetCollections'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            collections: _data.collections,
            page: _data.page
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.directorySearchCollections = (args, headers, signal) => {
      return this.fetch(this.url('DirectorySearchCollections'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            collections: _data.collections,
            page: _data.page
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.hostname = hostname;
    this.fetch = (input, init) => fetch(input, init);
  }
  url(name) {
    return this.hostname + this.path + name;
  }
}
class Collections {
  constructor(hostname, fetch) {
    this.hostname = void 0;
    this.fetch = void 0;
    this.path = '/rpc/Collections/';
    this.createCollection = (args, headers, signal) => {
      return this.fetch(this.url('CreateCollection'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            collection: _data.collection
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getCollection = (args, headers, signal) => {
      return this.fetch(this.url('GetCollection'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            collection: _data.collection
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.listCollections = (args, headers, signal) => {
      return this.fetch(this.url('ListCollections'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            page: _data.page,
            collections: _data.collections
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.updateCollection = (args, headers, signal) => {
      return this.fetch(this.url('UpdateCollection'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            collection: _data.collection
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.deleteCollection = (args, headers, signal) => {
      return this.fetch(this.url('DeleteCollection'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.publishCollection = (args, headers, signal) => {
      return this.fetch(this.url('PublishCollection'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            collection: _data.collection
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.unpublishCollection = (args, headers, signal) => {
      return this.fetch(this.url('UnpublishCollection'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            collection: _data.collection
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.createContractCollection = (args, headers, signal) => {
      return this.fetch(this.url('CreateContractCollection'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractCollection: _data.contractCollection
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getContractCollection = (args, headers, signal) => {
      return this.fetch(this.url('GetContractCollection'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractCollection: _data.contractCollection
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.listContractCollections = (args, headers, signal) => {
      return this.fetch(this.url('ListContractCollections'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractCollections: _data.contractCollections,
            collections: _data.collections,
            page: _data.page
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.updateContractCollection = (args, headers, signal) => {
      return this.fetch(this.url('UpdateContractCollection'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.deleteContractCollection = (args, headers, signal) => {
      return this.fetch(this.url('DeleteContractCollection'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.createToken = (args, headers, signal) => {
      return this.fetch(this.url('CreateToken'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            token: _data.token,
            assets: _data.assets
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getToken = (args, headers, signal) => {
      return this.fetch(this.url('GetToken'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            token: _data.token,
            assets: _data.assets
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.listTokens = (args, headers, signal) => {
      return this.fetch(this.url('ListTokens'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            page: _data.page,
            tokens: _data.tokens
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.updateToken = (args, headers, signal) => {
      return this.fetch(this.url('UpdateToken'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            token: _data.token
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.deleteToken = (args, headers, signal) => {
      return this.fetch(this.url('DeleteToken'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.createAsset = (args, headers, signal) => {
      return this.fetch(this.url('CreateAsset'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            asset: _data.asset
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getAsset = (args, headers, signal) => {
      return this.fetch(this.url('GetAsset'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            asset: _data.asset
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.updateAsset = (args, headers, signal) => {
      return this.fetch(this.url('UpdateAsset'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            asset: _data.asset
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.deleteAsset = (args, headers, signal) => {
      return this.fetch(this.url('DeleteAsset'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.hostname = hostname;
    this.fetch = (input, init) => fetch(input, init);
  }
  url(name) {
    return this.hostname + this.path + name;
  }
}
class Admin {
  constructor(hostname, fetch) {
    this.hostname = void 0;
    this.fetch = void 0;
    this.path = '/rpc/Admin/';
    this.addContractsToTokenDirectory = (args, headers, signal) => {
      return this.fetch(this.url('AddContractsToTokenDirectory'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.removeContractsFromTokenDirectory = (args, headers, signal) => {
      return this.fetch(this.url('RemoveContractsFromTokenDirectory'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.modifyFeatureIndex = (args, headers, signal) => {
      return this.fetch(this.url('ModifyFeatureIndex'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.getFeatureIndex = (args, headers, signal) => {
      return this.fetch(this.url('GetFeatureIndex'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            featured: _data.featured
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.listTokenDirectory = (args, headers, signal) => {
      return this.fetch(this.url('ListTokenDirectory'), createHTTPRequest(args, headers, signal)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            page: _data.page,
            collections: _data.collections
          };
        });
      }, error => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ''}`
        });
      });
    };
    this.hostname = hostname;
    this.fetch = (input, init) => fetch(input, init);
  }
  url(name) {
    return this.hostname + this.path + name;
  }
}
const createHTTPRequest = (body = {}, headers = {}, signal = null) => {
  return {
    method: 'POST',
    headers: _extends({}, headers, {
      'Content-Type': 'application/json'
    }),
    body: JSON.stringify(body || {}),
    signal
  };
};
const buildResponse = res => {
  return res.text().then(text => {
    let data;
    try {
      data = JSON.parse(text);
    } catch (error) {
      let message = '';
      if (error instanceof Error) {
        message = error.message;
      }
      throw WebrpcBadResponseError.new({
        status: res.status,
        cause: `JSON.parse(): ${message}: response text: ${text}`
      });
    }
    if (!res.ok) {
      const code = typeof data.code === 'number' ? data.code : 0;
      throw (webrpcErrorByCode[code] || WebrpcError).new(data);
    }
    return data;
  });
};

//
// Errors
//

class WebrpcError extends Error {
  constructor(name, code, message, status, cause) {
    super(message);
    this.name = void 0;
    this.code = void 0;
    this.message = void 0;
    this.status = void 0;
    this.cause = void 0;
    /** @deprecated Use message instead of msg. Deprecated in webrpc v0.11.0. */
    this.msg = void 0;
    this.name = name || 'WebrpcError';
    this.code = typeof code === 'number' ? code : 0;
    this.message = message || `endpoint error ${this.code}`;
    this.msg = this.message;
    this.status = typeof status === 'number' ? status : 0;
    this.cause = cause;
    Object.setPrototypeOf(this, WebrpcError.prototype);
  }
  static new(payload) {
    return new this(payload.error, payload.code, payload.message || payload.msg, payload.status, payload.cause);
  }
}

// Webrpc errors

class WebrpcEndpointError extends WebrpcError {
  constructor(name = 'WebrpcEndpoint', code = 0, message = 'endpoint error', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcEndpointError.prototype);
  }
}
class WebrpcRequestFailedError extends WebrpcError {
  constructor(name = 'WebrpcRequestFailed', code = -1, message = 'request failed', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcRequestFailedError.prototype);
  }
}
class WebrpcBadRouteError extends WebrpcError {
  constructor(name = 'WebrpcBadRoute', code = -2, message = 'bad route', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcBadRouteError.prototype);
  }
}
class WebrpcBadMethodError extends WebrpcError {
  constructor(name = 'WebrpcBadMethod', code = -3, message = 'bad method', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcBadMethodError.prototype);
  }
}
class WebrpcBadRequestError extends WebrpcError {
  constructor(name = 'WebrpcBadRequest', code = -4, message = 'bad request', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcBadRequestError.prototype);
  }
}
class WebrpcBadResponseError extends WebrpcError {
  constructor(name = 'WebrpcBadResponse', code = -5, message = 'bad response', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcBadResponseError.prototype);
  }
}
class WebrpcServerPanicError extends WebrpcError {
  constructor(name = 'WebrpcServerPanic', code = -6, message = 'server panic', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcServerPanicError.prototype);
  }
}
class WebrpcInternalErrorError extends WebrpcError {
  constructor(name = 'WebrpcInternalError', code = -7, message = 'internal error', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcInternalErrorError.prototype);
  }
}
class WebrpcClientDisconnectedError extends WebrpcError {
  constructor(name = 'WebrpcClientDisconnected', code = -8, message = 'client disconnected', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcClientDisconnectedError.prototype);
  }
}
class WebrpcStreamLostError extends WebrpcError {
  constructor(name = 'WebrpcStreamLost', code = -9, message = 'stream lost', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcStreamLostError.prototype);
  }
}
class WebrpcStreamFinishedError extends WebrpcError {
  constructor(name = 'WebrpcStreamFinished', code = -10, message = 'stream finished', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcStreamFinishedError.prototype);
  }
}

// Schema errors

class UnauthorizedError extends WebrpcError {
  constructor(name = 'Unauthorized', code = 1000, message = 'Unauthorized access', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, UnauthorizedError.prototype);
  }
}
class PermissionDeniedError extends WebrpcError {
  constructor(name = 'PermissionDenied', code = 1001, message = 'Permission denied', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, PermissionDeniedError.prototype);
  }
}
class SessionExpiredError extends WebrpcError {
  constructor(name = 'SessionExpired', code = 1002, message = 'Session expired', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, SessionExpiredError.prototype);
  }
}
class MethodNotFoundError extends WebrpcError {
  constructor(name = 'MethodNotFound', code = 1003, message = 'Method not found', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, MethodNotFoundError.prototype);
  }
}
class RequestConflictError extends WebrpcError {
  constructor(name = 'RequestConflict', code = 1004, message = 'Conflict with target resource', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, RequestConflictError.prototype);
  }
}
class FailError extends WebrpcError {
  constructor(name = 'Fail', code = 1005, message = 'Request Failed', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, FailError.prototype);
  }
}
class GeoblockedError extends WebrpcError {
  constructor(name = 'Geoblocked', code = 1006, message = 'Geoblocked region', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, GeoblockedError.prototype);
  }
}
class TimeoutError extends WebrpcError {
  constructor(name = 'Timeout', code = 2000, message = 'Request timed out', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, TimeoutError.prototype);
  }
}
class InvalidArgumentError extends WebrpcError {
  constructor(name = 'InvalidArgument', code = 2001, message = 'Invalid argument', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, InvalidArgumentError.prototype);
  }
}
class RequiredArgumentError extends WebrpcError {
  constructor(name = 'RequiredArgument', code = 2002, message = 'Required argument missing', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, RequiredArgumentError.prototype);
  }
}
class QueryFailedError extends WebrpcError {
  constructor(name = 'QueryFailed', code = 2003, message = 'Query failed', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, QueryFailedError.prototype);
  }
}
class ValidationFailedError extends WebrpcError {
  constructor(name = 'ValidationFailed', code = 2004, message = 'Validation failed', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, ValidationFailedError.prototype);
  }
}
class RateLimitedError extends WebrpcError {
  constructor(name = 'RateLimited', code = 2005, message = 'Rate limited', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, RateLimitedError.prototype);
  }
}
class NotFoundError extends WebrpcError {
  constructor(name = 'NotFound', code = 3000, message = 'Resource not found', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, NotFoundError.prototype);
  }
}
class ProjectNotFoundError extends WebrpcError {
  constructor(name = 'ProjectNotFound', code = 3002, message = 'Project not found', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, ProjectNotFoundError.prototype);
  }
}
class ChainNotFoundError extends WebrpcError {
  constructor(name = 'ChainNotFound', code = 3003, message = 'Chain not found', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, ChainNotFoundError.prototype);
  }
}
class TokenDirectoryDisabledError extends WebrpcError {
  constructor(name = 'TokenDirectoryDisabled', code = 4001, message = 'Token Directory is disabled', status = 0, cause) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, TokenDirectoryDisabledError.prototype);
  }
}
let errors = /*#__PURE__*/function (errors) {
  errors["WebrpcEndpoint"] = "WebrpcEndpoint";
  errors["WebrpcRequestFailed"] = "WebrpcRequestFailed";
  errors["WebrpcBadRoute"] = "WebrpcBadRoute";
  errors["WebrpcBadMethod"] = "WebrpcBadMethod";
  errors["WebrpcBadRequest"] = "WebrpcBadRequest";
  errors["WebrpcBadResponse"] = "WebrpcBadResponse";
  errors["WebrpcServerPanic"] = "WebrpcServerPanic";
  errors["WebrpcInternalError"] = "WebrpcInternalError";
  errors["WebrpcClientDisconnected"] = "WebrpcClientDisconnected";
  errors["WebrpcStreamLost"] = "WebrpcStreamLost";
  errors["WebrpcStreamFinished"] = "WebrpcStreamFinished";
  errors["Unauthorized"] = "Unauthorized";
  errors["PermissionDenied"] = "PermissionDenied";
  errors["SessionExpired"] = "SessionExpired";
  errors["MethodNotFound"] = "MethodNotFound";
  errors["RequestConflict"] = "RequestConflict";
  errors["Fail"] = "Fail";
  errors["Geoblocked"] = "Geoblocked";
  errors["Timeout"] = "Timeout";
  errors["InvalidArgument"] = "InvalidArgument";
  errors["RequiredArgument"] = "RequiredArgument";
  errors["QueryFailed"] = "QueryFailed";
  errors["ValidationFailed"] = "ValidationFailed";
  errors["RateLimited"] = "RateLimited";
  errors["NotFound"] = "NotFound";
  errors["ProjectNotFound"] = "ProjectNotFound";
  errors["ChainNotFound"] = "ChainNotFound";
  errors["TokenDirectoryDisabled"] = "TokenDirectoryDisabled";
  return errors;
}({});
const webrpcErrorByCode = {
  [0]: WebrpcEndpointError,
  [-1]: WebrpcRequestFailedError,
  [-2]: WebrpcBadRouteError,
  [-3]: WebrpcBadMethodError,
  [-4]: WebrpcBadRequestError,
  [-5]: WebrpcBadResponseError,
  [-6]: WebrpcServerPanicError,
  [-7]: WebrpcInternalErrorError,
  [-8]: WebrpcClientDisconnectedError,
  [-9]: WebrpcStreamLostError,
  [-10]: WebrpcStreamFinishedError,
  [1000]: UnauthorizedError,
  [1001]: PermissionDeniedError,
  [1002]: SessionExpiredError,
  [1003]: MethodNotFoundError,
  [1004]: RequestConflictError,
  [1005]: FailError,
  [1006]: GeoblockedError,
  [2000]: TimeoutError,
  [2001]: InvalidArgumentError,
  [2002]: RequiredArgumentError,
  [2003]: QueryFailedError,
  [2004]: ValidationFailedError,
  [2005]: RateLimitedError,
  [3000]: NotFoundError,
  [3002]: ProjectNotFoundError,
  [3003]: ChainNotFoundError,
  [4001]: TokenDirectoryDisabledError
};

const fetch = globalThis.fetch;
class SequenceMetadata extends Metadata {
  constructor(hostname = 'https://metadata.sequence.app', projectAccessKey, jwtAuth) {
    super(hostname.endsWith('/') ? hostname.slice(0, -1) : hostname, fetch);
    this.projectAccessKey = projectAccessKey;
    this.jwtAuth = jwtAuth;
    this._fetch = (input, init) => {
      // automatically include jwt and access key auth header to requests
      // if its been set on the client
      const headers = {};
      const jwtAuth = this.jwtAuth;
      const projectAccessKey = this.projectAccessKey;
      if (jwtAuth && jwtAuth.length > 0) {
        headers['Authorization'] = `BEARER ${jwtAuth}`;
      }
      if (projectAccessKey && projectAccessKey.length > 0) {
        headers['X-Access-Key'] = projectAccessKey;
      }

      // before the request is made
      init.headers = _extends({}, init.headers, headers);
      return fetch(input, init);
    };
    this.fetch = this._fetch;
  }
}
class SequenceCollections extends Collections {
  constructor(hostname = 'https://metadata.sequence.app', jwtAuth) {
    super(hostname.endsWith('/') ? hostname.slice(0, -1) : hostname, fetch);
    this.jwtAuth = jwtAuth;
    this._fetch = (input, init) => {
      // automatically include jwt auth header to requests
      // if its been set on the client
      const headers = {};
      const jwtAuth = this.jwtAuth;
      if (jwtAuth && jwtAuth.length > 0) {
        headers['Authorization'] = `BEARER ${jwtAuth}`;
      }

      // before the request is made
      init.headers = _extends({}, init.headers, headers);
      return fetch(input, init);
    };
    this.fetch = this._fetch;
  }

  // TODO: add uploadAsset() method similar to,
  // https://github.com/0xsequence/go-sequence/blob/master/metadata/collections.go#L52
}

exports.Admin = Admin;
exports.ChainNotFoundError = ChainNotFoundError;
exports.Collections = Collections;
exports.ContractType = ContractType;
exports.FailError = FailError;
exports.GeoblockedError = GeoblockedError;
exports.InvalidArgumentError = InvalidArgumentError;
exports.Metadata = Metadata;
exports.MethodNotFoundError = MethodNotFoundError;
exports.NotFoundError = NotFoundError;
exports.PermissionDeniedError = PermissionDeniedError;
exports.ProjectNotFoundError = ProjectNotFoundError;
exports.PropertyType = PropertyType;
exports.QueryFailedError = QueryFailedError;
exports.RateLimitedError = RateLimitedError;
exports.RequestConflictError = RequestConflictError;
exports.RequiredArgumentError = RequiredArgumentError;
exports.SequenceCollections = SequenceCollections;
exports.SequenceMetadata = SequenceMetadata;
exports.SessionExpiredError = SessionExpiredError;
exports.SwapType = SwapType;
exports.TaskStatus = TaskStatus;
exports.TimeoutError = TimeoutError;
exports.TokenDirectoryDisabledError = TokenDirectoryDisabledError;
exports.UnauthorizedError = UnauthorizedError;
exports.ValidationFailedError = ValidationFailedError;
exports.WebRPCSchemaHash = WebRPCSchemaHash;
exports.WebRPCSchemaVersion = WebRPCSchemaVersion;
exports.WebRPCVersion = WebRPCVersion;
exports.WebrpcBadMethodError = WebrpcBadMethodError;
exports.WebrpcBadRequestError = WebrpcBadRequestError;
exports.WebrpcBadResponseError = WebrpcBadResponseError;
exports.WebrpcBadRouteError = WebrpcBadRouteError;
exports.WebrpcClientDisconnectedError = WebrpcClientDisconnectedError;
exports.WebrpcEndpointError = WebrpcEndpointError;
exports.WebrpcError = WebrpcError;
exports.WebrpcInternalErrorError = WebrpcInternalErrorError;
exports.WebrpcRequestFailedError = WebrpcRequestFailedError;
exports.WebrpcServerPanicError = WebrpcServerPanicError;
exports.WebrpcStreamFinishedError = WebrpcStreamFinishedError;
exports.WebrpcStreamLostError = WebrpcStreamLostError;
exports.errors = errors;
