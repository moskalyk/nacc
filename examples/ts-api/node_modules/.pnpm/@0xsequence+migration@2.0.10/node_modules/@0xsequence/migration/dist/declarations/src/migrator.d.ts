import { commons } from '@0xsequence/core';
import { Wallet } from '@0xsequence/wallet';
import { Migration } from "./migrations/index.js";
import { ethers } from 'ethers';
export type UnsignedMigration = {
    tx: commons.transaction.TransactionBundle;
    fromVersion: number;
    toVersion: number;
    toConfig: commons.config.Config;
};
export type SignedMigration = Omit<UnsignedMigration, 'tx'> & {
    tx: commons.transaction.SignedTransactionBundle;
};
export interface PresignedMigrationTracker {
    getMigration(address: string, fromImageHash: string, fromVersion: number, chainId: ethers.BigNumberish): Promise<SignedMigration | undefined>;
    saveMigration(address: string, signed: SignedMigration, contexts: commons.context.VersionedContext): Promise<void>;
}
export type Migrations = {
    [version: number]: Migration<commons.config.Config, commons.config.Config>;
};
export declare class Migrator {
    readonly tracker: PresignedMigrationTracker;
    readonly migrations: Migrations;
    readonly contexts: commons.context.VersionedContext;
    constructor(tracker: PresignedMigrationTracker, migrations: Migrations, contexts: commons.context.VersionedContext);
    lastMigration(): Migration<commons.config.Config, commons.config.Config>;
    getAllMigratePresignedTransaction(args: {
        address: string;
        fromImageHash: string;
        fromVersion: number;
        chainId: ethers.BigNumberish;
    }): Promise<{
        lastVersion: number;
        lastImageHash: string;
        signedMigrations: SignedMigration[];
        missing: boolean;
    }>;
    signNextMigration(address: string, fromVersion: number, wallet: Wallet, nextConfig: commons.config.Config): Promise<SignedMigration | undefined>;
}
