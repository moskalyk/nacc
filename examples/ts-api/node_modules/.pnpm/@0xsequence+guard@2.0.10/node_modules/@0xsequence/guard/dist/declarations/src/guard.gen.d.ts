export declare const WebRPCVersion = "v1";
export declare const WebRPCSchemaVersion = "v0.4.0";
export declare const WebRPCSchemaHash = "5b203e30a5c79b2b9a37483ce17500a51b94ebe1";
export interface Version {
    webrpcVersion: string;
    schemaVersion: string;
    schemaHash: string;
    appVersion: string;
}
export interface RuntimeStatus {
    healthOK: boolean;
    startTime: string;
    uptime: number;
    ver: string;
    branch: string;
    commitHash: string;
}
export interface WalletConfig {
    address: string;
    content: string;
}
export interface WalletSigner {
    address: string;
    weight: number;
}
export interface SignRequest {
    chainId: number;
    msg: string;
    auxData: string;
}
export interface OwnershipProof {
    wallet: string;
    timestamp: number;
    signer: string;
    signature: string;
}
export interface AuthToken {
    id: string;
    token: string;
}
export interface RecoveryCode {
    code: string;
    used: boolean;
}
export interface Guard {
    ping(headers?: object, signal?: AbortSignal): Promise<PingReturn>;
    version(headers?: object, signal?: AbortSignal): Promise<VersionReturn>;
    runtimeStatus(headers?: object, signal?: AbortSignal): Promise<RuntimeStatusReturn>;
    getSignerConfig(args: GetSignerConfigArgs, headers?: object, signal?: AbortSignal): Promise<GetSignerConfigReturn>;
    sign(args: SignArgs, headers?: object, signal?: AbortSignal): Promise<SignReturn>;
    signWith(args: SignWithArgs, headers?: object, signal?: AbortSignal): Promise<SignWithReturn>;
    patch(args: PatchArgs, headers?: object, signal?: AbortSignal): Promise<PatchReturn>;
    authMethods(args: AuthMethodsArgs, headers?: object, signal?: AbortSignal): Promise<AuthMethodsReturn>;
    setPIN(args: SetPINArgs, headers?: object, signal?: AbortSignal): Promise<SetPINReturn>;
    resetPIN(args: ResetPINArgs, headers?: object, signal?: AbortSignal): Promise<ResetPINReturn>;
    createTOTP(args: CreateTOTPArgs, headers?: object, signal?: AbortSignal): Promise<CreateTOTPReturn>;
    commitTOTP(args: CommitTOTPArgs, headers?: object, signal?: AbortSignal): Promise<CommitTOTPReturn>;
    resetTOTP(args: ResetTOTPArgs, headers?: object, signal?: AbortSignal): Promise<ResetTOTPReturn>;
    reset2FA(args: Reset2FAArgs, headers?: object, signal?: AbortSignal): Promise<Reset2FAReturn>;
    recoveryCodes(args: RecoveryCodesArgs, headers?: object, signal?: AbortSignal): Promise<RecoveryCodesReturn>;
    resetRecoveryCodes(args: ResetRecoveryCodesArgs, headers?: object, signal?: AbortSignal): Promise<ResetRecoveryCodesReturn>;
}
export interface PingArgs {
}
export interface PingReturn {
    status: boolean;
}
export interface VersionArgs {
}
export interface VersionReturn {
    version: Version;
}
export interface RuntimeStatusArgs {
}
export interface RuntimeStatusReturn {
    status: RuntimeStatus;
}
export interface GetSignerConfigArgs {
    signer: string;
}
export interface GetSignerConfigReturn {
    signerConfig: WalletConfig;
}
export interface SignArgs {
    request: SignRequest;
    token?: AuthToken;
}
export interface SignReturn {
    sig: string;
}
export interface SignWithArgs {
    signer: string;
    request: SignRequest;
    token?: AuthToken;
}
export interface SignWithReturn {
    sig: string;
}
export interface PatchArgs {
    signer: string;
    chainId: number;
    secret: string;
}
export interface PatchReturn {
    txs: any;
}
export interface AuthMethodsArgs {
    proof?: OwnershipProof;
}
export interface AuthMethodsReturn {
    methods: Array<string>;
    active: boolean;
}
export interface SetPINArgs {
    pin: string;
    timestamp: number;
    signature: string;
}
export interface SetPINReturn {
}
export interface ResetPINArgs {
    timestamp: number;
    signature: string;
}
export interface ResetPINReturn {
}
export interface CreateTOTPArgs {
    timestamp: number;
    signature: string;
}
export interface CreateTOTPReturn {
    uri: string;
}
export interface CommitTOTPArgs {
    token: string;
}
export interface CommitTOTPReturn {
    codes: Array<RecoveryCode>;
}
export interface ResetTOTPArgs {
    timestamp: number;
    signature: string;
}
export interface ResetTOTPReturn {
}
export interface Reset2FAArgs {
    code: string;
    proof?: OwnershipProof;
}
export interface Reset2FAReturn {
}
export interface RecoveryCodesArgs {
    timestamp: number;
    signature: string;
}
export interface RecoveryCodesReturn {
    codes: Array<RecoveryCode>;
}
export interface ResetRecoveryCodesArgs {
    timestamp: number;
    signature: string;
}
export interface ResetRecoveryCodesReturn {
    codes: Array<RecoveryCode>;
}
export declare class Guard implements Guard {
    protected hostname: string;
    protected fetch: Fetch;
    protected path: string;
    constructor(hostname: string, fetch: Fetch);
    private url;
    ping: (headers?: object | undefined, signal?: AbortSignal | undefined) => Promise<PingReturn>;
    version: (headers?: object | undefined, signal?: AbortSignal | undefined) => Promise<VersionReturn>;
    runtimeStatus: (headers?: object | undefined, signal?: AbortSignal | undefined) => Promise<RuntimeStatusReturn>;
    getSignerConfig: (args: GetSignerConfigArgs, headers?: object | undefined, signal?: AbortSignal | undefined) => Promise<GetSignerConfigReturn>;
    sign: (args: SignArgs, headers?: object | undefined, signal?: AbortSignal | undefined) => Promise<SignReturn>;
    signWith: (args: SignWithArgs, headers?: object | undefined, signal?: AbortSignal | undefined) => Promise<SignWithReturn>;
    patch: (args: PatchArgs, headers?: object | undefined, signal?: AbortSignal | undefined) => Promise<PatchReturn>;
    authMethods: (args: AuthMethodsArgs, headers?: object | undefined, signal?: AbortSignal | undefined) => Promise<AuthMethodsReturn>;
    setPIN: (args: SetPINArgs, headers?: object | undefined, signal?: AbortSignal | undefined) => Promise<SetPINReturn>;
    resetPIN: (args: ResetPINArgs, headers?: object | undefined, signal?: AbortSignal | undefined) => Promise<ResetPINReturn>;
    createTOTP: (args: CreateTOTPArgs, headers?: object | undefined, signal?: AbortSignal | undefined) => Promise<CreateTOTPReturn>;
    commitTOTP: (args: CommitTOTPArgs, headers?: object | undefined, signal?: AbortSignal | undefined) => Promise<CommitTOTPReturn>;
    resetTOTP: (args: ResetTOTPArgs, headers?: object | undefined, signal?: AbortSignal | undefined) => Promise<ResetTOTPReturn>;
    reset2FA: (args: Reset2FAArgs, headers?: object | undefined, signal?: AbortSignal | undefined) => Promise<Reset2FAReturn>;
    recoveryCodes: (args: RecoveryCodesArgs, headers?: object | undefined, signal?: AbortSignal | undefined) => Promise<RecoveryCodesReturn>;
    resetRecoveryCodes: (args: ResetRecoveryCodesArgs, headers?: object | undefined, signal?: AbortSignal | undefined) => Promise<ResetRecoveryCodesReturn>;
}
export declare class WebrpcError extends Error {
    name: string;
    code: number;
    message: string;
    status: number;
    cause?: string;
    /** @deprecated Use message instead of msg. Deprecated in webrpc v0.11.0. */
    msg: string;
    constructor(name: string, code: number, message: string, status: number, cause?: string);
    static new(payload: any): WebrpcError;
}
export declare class WebrpcEndpointError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class WebrpcRequestFailedError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class WebrpcBadRouteError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class WebrpcBadMethodError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class WebrpcBadRequestError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class WebrpcBadResponseError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class WebrpcServerPanicError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class WebrpcInternalErrorError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class WebrpcClientDisconnectedError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class WebrpcStreamLostError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class WebrpcStreamFinishedError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class UnauthorizedError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class SessionExpiredError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class AbortedError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class InvalidArgumentError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class UnavailableError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class QueryFailedError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class ValidationFailedError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare class NotFoundError extends WebrpcError {
    constructor(name?: string, code?: number, message?: string, status?: number, cause?: string);
}
export declare enum errors {
    WebrpcEndpoint = "WebrpcEndpoint",
    WebrpcRequestFailed = "WebrpcRequestFailed",
    WebrpcBadRoute = "WebrpcBadRoute",
    WebrpcBadMethod = "WebrpcBadMethod",
    WebrpcBadRequest = "WebrpcBadRequest",
    WebrpcBadResponse = "WebrpcBadResponse",
    WebrpcServerPanic = "WebrpcServerPanic",
    WebrpcInternalError = "WebrpcInternalError",
    WebrpcClientDisconnected = "WebrpcClientDisconnected",
    WebrpcStreamLost = "WebrpcStreamLost",
    WebrpcStreamFinished = "WebrpcStreamFinished",
    Unauthorized = "Unauthorized",
    SessionExpired = "SessionExpired",
    Aborted = "Aborted",
    InvalidArgument = "InvalidArgument",
    Unavailable = "Unavailable",
    QueryFailed = "QueryFailed",
    ValidationFailed = "ValidationFailed",
    NotFound = "NotFound"
}
export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>;
